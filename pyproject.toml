[project]
name = "aqualog"
version = "0.1.0"
description = "Aqualog - Internal web application for a small Italian freediving society to manage and visualize training and test data"
authors = [
    {name = "Freediving Society", email = "admin@freedivingsociety.it"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "streamlit>=1.50.0",
    "duckdb>=1.4.1",
    "faker>=37.12.0",
    "typer>=0.12.0",
    "loguru>=0.7.0",
    "pandas>=2.0.0",
    "plotly>=5.0.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.6.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
populate-db = "scripts.populate_db:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["app", "db", "config", "scripts"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov=db",
    "--cov=config",
    "--cov=scripts",
    "--cov-report=term-missing",
    "--cov-report=html",
]